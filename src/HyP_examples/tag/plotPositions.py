import re
import matplotlib.pyplot as plt
import numpy as np
import argparse
import os.path

# TODO: Standardise between height/width/ncols/nrows/x/y

class FrequencyMap(object):
	"""Counts occurence frequency on a 2D map"""
	def __init__(self, nrows, ncols):
		self.map = np.zeros((nrows, ncols))

	def increment(self, x, y):
		self.map[y][x] += 1

def main(data, file_prefix, width, height, label_suffix):
	if not os.path.isfile(data):
		print "File " + data + " does not exist!"
		return

	f = open(data, 'r')

	rMap = FrequencyMap(height, width)
	oMap = FrequencyMap(height, width)

	lastAction = ""
	for line in f:
		if line[:11] == "- Action = ":
			lastAction = line[11:]
			continue
		if lastAction == "Tag":
			continue
		robMatch = re.search("Rob at \((\d+), (\d+)\)", line)
		if robMatch:
			rMap.increment(int(robMatch.group(1)), int(robMatch.group(2)))
			continue
		oppMatch = re.search("Opp at \((\d+), (\d+)\)", line)
		if oppMatch:
			oMap.increment(int(oppMatch.group(1)), int(oppMatch.group(2)))

	fig, ax = plt.subplots()

	ax.set_xticks(np.arange(oMap.map.shape[1]), minor=False)
	ax.set_yticks(np.arange(oMap.map.shape[0]), minor=False)

	ax.set_xticklabels(np.arange(oMap.map.shape[1]), minor=False)
	ax.set_yticklabels(np.arange(oMap.map.shape[0]), minor=False)

	ax.xaxis.tick_top()

	if label_suffix:
		ax.set_xlabel("Opponent Position Distribution - " + label_suffix)
	else:
		ax.set_xlabel("Opponent Position Distribution")
	heatmap = ax.pcolormesh(oMap.map ** 0.5, cmap=plt.cm.autumn_r)
	plt.savefig(file_prefix + "_o.png")

	if label_suffix:
		ax.set_xlabel("Robot Position Distribution - " + label_suffix)
	else:
		ax.set_xlabel("Robot Position Distribution")
	heatmap2 = ax.pcolormesh(rMap.map ** 0.5, cmap=plt.cm.autumn_r)
	plt.savefig(file_prefix + "_r.png")
#        plt.show()

if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument('data', help="output data from despot")
	parser.add_argument('-f', '--file-prefix', help="prefix for image files generated by the program (default is same as 'data')")
	parser.add_argument('-x', '--width', help="width of the input map used (default is 11)")
	parser.add_argument('-y', '--height', help="height of the input map used (default is 7)")
	parser.add_argument('-s', '--label-suffix', help="suffix for chart label, used for naming charts (default is empty)")
	args = parser.parse_args()

	if args.file_prefix:
		file_prefix = args.file_prefix
	else:
		if args.data[-4:] == ".out":
			file_prefix = args.data[:-4]
		else:
			file_prefix = args.data
	width = int(args.width) if args.width else 11
	height = int(args.height) if args.height else 7
	label_suffix = args.label_suffix if args.label_suffix else None

	main(data=args.data, file_prefix=file_prefix, width=width, height=height, label_suffix=label_suffix)
